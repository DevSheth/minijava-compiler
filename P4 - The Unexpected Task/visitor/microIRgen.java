//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class microIRgen<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   public static int count = 5000;

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      argu = (A) new String(" ");
      n.f0.accept(this, argu);
      System.out.println("MAIN\n");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END\n\n");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A) ";");
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String s1, s2;
      String code = new String();
      argu = (A) " ";

      n.f0.accept(this, (A) ";");
      n.f1.accept(this, argu);
      s1 = (String) n.f2.accept(this, (A) ":");
      
      code = "[ " + s1 + " ]" + "\n";
      code = code + "BEGIN\n";
      System.out.println(code);

      n.f3.accept(this, argu);
      s2 = (String) n.f4.accept(this, argu);

      code = "RETURN\n" + s2 + "\nEND\n";
      System.out.println(code);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      argu = (A) " ";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("NOOP\n");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("ERROR\n");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      String s1;
      n.f0.accept(this, argu);
      s1 = (String) n.f1.accept(this, argu);
      System.out.println("CJUMP " + s1 + " ");
      n.f2.accept(this, (A) ";");
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("JUMP ");
      n.f1.accept(this, (A) ";");
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      String s1, s2, s3;
      n.f0.accept(this, argu);
      s1 = (String) n.f1.accept(this, argu);
      s2 = (String) n.f2.accept(this, (A) ":");
      s3 = (String) n.f3.accept(this, argu);
      System.out.println("HSTORE " + s1 + " " + s2 + " " + s3 + "\n");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      String s1, s2, s3;
      n.f0.accept(this, argu);
      s1 = (String) n.f1.accept(this, argu);
      s2 = (String) n.f2.accept(this, argu);
      s3 = (String) n.f3.accept(this, (A) ":");
      System.out.println("HLOAD " + s1 + " " + s2 + " " + s3 + "\n");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      String s1, s2;
      n.f0.accept(this, argu);
      s1 = (String) n.f1.accept(this, argu);
      s2 = (String) n.f2.accept(this, argu);
      System.out.println("MOVE " + s1 + " " + s2 + "\n");
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      String s1;
      n.f0.accept(this, argu);
      s1 = (String) n.f1.accept(this, argu);
      System.out.println("PRINT " + s1 + "\n");
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      String s1;
      String code = new String();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      s1 = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      code = "MOVE TEMP " + Integer.toString(count) + " " + s1 + " " + "\n";
      System.out.println(code);
      _ret = (R) new String("TEMP " + Integer.toString(count));
      count++;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      String s1;
      String s2 = new String(" ");
      
      n.f0.accept(this, argu);
      s1 = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      Enumeration<Node> e = n.f3.elements();
      while(e.hasMoreElements()){
        s2 = s2 + (String) e.nextElement().accept(this,argu) + " ";
      }

      n.f4.accept(this, argu);
      
      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " " + "CALL " + s1 + " " +  "( " + s2 + " )" + "\n";
      System.out.println(code);
      _ret = (R) new String("TEMP " + Integer.toString(count));
      count++;
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      String s1;
      String code = new String();

      n.f0.accept(this, argu);
      s1 = (String) n.f1.accept(this, argu);

      code = "MOVE TEMP " + Integer.toString(count) + " " + "HALLOCATE " + s1 + "\n";
      System.out.println(code);
      _ret = (R) new String("TEMP " + Integer.toString(count));
      count++;
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String s1, s2, s3;
      s1 = (String) n.f0.accept(this, argu);
      s2 = (String) n.f1.accept(this, argu);
      s3 = (String) n.f2.accept(this, argu);
      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " " + s1 + " " + s2 + " " + s3 + "\n";
      System.out.println(code);
      _ret = (R) new String("TEMP " + Integer.toString(count));
      count++;
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(n.f0.which == 0){
        _ret = (R) new String("LE");
      }
      else if(n.f0.which == 1){
        _ret = (R) new String("NE");
      }
      else if(n.f0.which == 2){
        _ret = (R) new String("PLUS");
      }
      else if(n.f0.which == 3){
        _ret = (R) new String("MINUS");
      }
      else if(n.f0.which == 4){
        _ret = (R) new String("TIMES");
      }
      else if(n.f0.which == 5){
        _ret = (R) new String("DIV");
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A) ":");
      _ret = (R) new String("TEMP " + n.f1.f0.tokenImage); 
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s1 = (String) argu;
      if(s1.equals(":")){
        _ret = (R) new String(n.f0.tokenImage);
      }
      else{
        String code = new String();
        code = "MOVE TEMP " + Integer.toString(count) + " " + n.f0.tokenImage + "\n";
        System.out.println(code);
        _ret = (R) new String("TEMP " + Integer.toString(count));
        count++;
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s1 = (String) argu;
      if(s1.equals(";")){
        System.out.println(n.f0.tokenImage + "\n");
      }
      else{
        String code = new String();
        code = "MOVE TEMP " + Integer.toString(count) + " " + n.f0.tokenImage + "\n";
        System.out.println(code);
        _ret = (R) new String("TEMP " + Integer.toString(count));
        count++;
      }
      return _ret;
   }

}
