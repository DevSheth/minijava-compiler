//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Translator<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   public static int offset = 0;
   public static int params = 0;
   public static int expflag = 2;
   public static int simexpflag = 0;
   public static String opreg = new String();
   public static String opsimexp = new String();

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      argu = (A) new String(" ");

      int x = Integer.valueOf(n.f5.f0.tokenImage);
      int y = Integer.valueOf(n.f8.f0.tokenImage);
      y = Math.max(0, y-4);
      offset = y;
      int stack = 4*(x+y) + 4;
      System.out.println("\t.text");
      System.out.println("\t.globl\tmain");
      System.out.println("main:");
      System.out.println("\tmove $fp, $sp");
      System.out.println("\tsubu $sp, $sp, " + Integer.toString(stack));
      System.out.println("\tsw $ra, -4($fp)");

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      System.out.println("\tlw $ra, -4($fp)");
      System.out.println("\taddu $sp, $sp, " + Integer.toString(stack));
      System.out.println("\tj $ra\n");

      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      
      System.out.println("\t.text");
      System.out.println("\t.globl _halloc");
      System.out.println("_halloc:");
      System.out.println("\tli $v0, 9\n\tsyscall\n\tj $ra\n");
      
      System.out.println("\t.text");
      System.out.println("\t.globl _print");
      System.out.println("_print:");
      System.out.println("\tli $v0, 1\n\tsyscall\n\tla $a0, newl\n\tli $v0, 4\n\tsyscall\n\tj $ra\n");
      
      System.out.println("\t.data");
      System.out.println("\t.align   0");
      System.out.println("newl:");
      System.out.println("\t.asciiz \"\\n\"");
      System.out.println("\t.data");
      System.out.println("\t.align   0");
      System.out.println("str_er:");
      System.out.println("\t.asciiz \" ERROR: abnormal termination\\n\"");

      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A) ";");
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;

      String proc = new String(n.f0.f0.tokenImage);
      int x = Integer.valueOf(n.f5.f0.tokenImage);
      int y = Integer.valueOf(n.f8.f0.tokenImage);
      y = Math.max(0, y-4);
      offset = y;
      int z = Integer.valueOf(n.f2.f0.tokenImage);
      z = Math.max(0, z-4);
      params = z;
      int stack = 4*(x+y) + 8;
      System.out.println("\t.text");
      System.out.println("\t.globl\t" + proc);
      System.out.println(proc + ":");
      System.out.println("\tsw $fp, -8($sp)");
      System.out.println("\tmove $fp, $sp");
      System.out.println("\tsubu $sp, $sp, " + Integer.toString(stack));
      System.out.println("\tsw $ra, -4($fp)");

      n.f0.accept(this, (A) " ");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      System.out.println("\tlw $ra, -4($fp)");
      System.out.println("\tlw $fp, " + Integer.toString(stack-8) + "($sp)");
      System.out.println("\taddu $sp, $sp, " + Integer.toString(stack));
      System.out.println("\tj $ra\n");

      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\tnop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      String a = new String();
      String b = new String();

      n.f0.accept(this, argu);
      a = (String) n.f1.accept(this, argu);
      b = (String) n.f2.accept(this, (A) " ");

      System.out.println("\tbeqz $" + a + " " + b);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      String b = new String();

      n.f0.accept(this, argu);
      b = (String) n.f1.accept(this, (A) " ");

      System.out.println("\tb " + b);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      String a = new String();
      String b = new String();
      String c = new String();

      n.f0.accept(this, argu);
      a = (String) n.f1.accept(this, argu);
      b = (String) n.f2.accept(this, argu);
      c = (String) n.f3.accept(this, argu);
      
      System.out.println("\tsw $" + c + ", " + b + "($" + a + ")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      String a = new String();
      String b = new String();
      String c = new String();

      n.f0.accept(this, argu);
      a = (String) n.f1.accept(this, argu);
      b = (String) n.f2.accept(this, argu);
      c = (String) n.f3.accept(this, argu);

      System.out.println("\tlw $" + a + ", " + c + "($" + b + ")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      String a = new String();
      String b = new String();

      n.f0.accept(this, argu);
      a = (String) n.f1.accept(this, argu);
      b = (String) n.f2.accept(this, argu);

      if(expflag == 2){
        if(simexpflag == 0){
          System.out.println("\tmove $" + a + " $" + b);
        }
        else if(simexpflag == 1){
          System.out.println("\tli $" + a + " " + b);        
        }
        else if(simexpflag == 2){
          System.out.println("\tla $" + a + " " + b);
        }
      }
      else if(expflag == 0){
        System.out.println("\tmove $" + a + " $v0");
      }
      else if(expflag == 1){
        if(b.equals("LE")){
          System.out.println("\tsle $" + a + ", $" + opreg + ", $a0");
        }
        else if(b.equals("NE")){
          System.out.println("\tsne $" + a + ", $" + opreg + ", $a0");
        }
        else if(b.equals("PLUS")){
          System.out.println("\tadd $" + a + ", $" + opreg + ", $a0");
        }
        else if(b.equals("MINUS")){
          System.out.println("\tsub $" + a + ", $" + opreg + ", $a0");
        }
        else if(b.equals("TIMES")){
          System.out.println("\tmul $" + a + ", $" + opreg + ", $a0");
        }
        else if(b.equals("DIV")){
          System.out.println("\tdiv $" + a + ", $" + opreg + ", $a0");
        }
      }
      
      expflag = 2;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      String a = new String();

      n.f0.accept(this, argu);
      a = (String) n.f1.accept(this, argu);

      if(simexpflag == 0){
        System.out.println("\tmove $a0 $" + a);
      }
      else if(simexpflag == 1){
        System.out.println("\tli $a0 " + a);        
      }
      else if(simexpflag == 2){
        System.out.println("\tla $a0 " + a);
      }
      System.out.println("\tjal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      String a = new String();
      String b = new String();

      n.f0.accept(this, argu);
      b = (String) n.f1.accept(this, argu);
      a = (String) n.f2.accept(this, argu);

      int aha = Integer.valueOf(a);
      int tmp = offset + aha;
      if(aha < params){
        System.out.println("\tlw $" + b + ", " + Integer.toString(aha*4) + "($fp)");
      }
      else{
        System.out.println("\tlw $" + b + ", " + Integer.toString(tmp*4) + "($sp)");
      }
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      String a = new String();
      String b = new String();

      n.f0.accept(this, argu);
      a = (String) n.f1.accept(this, argu);
      b = (String) n.f2.accept(this, argu);

      int tmp = offset + Integer.valueOf(a);
      System.out.println("\tsw $" + b + ", " + Integer.toString(tmp*4) + "($sp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      String a = new String();
      String b = new String();

      n.f0.accept(this, argu);
      a = (String) n.f1.accept(this, argu);
      b = (String) n.f2.accept(this, argu);

      int tmp = Integer.valueOf(a) - 1;
      System.out.println("\tsw $" + b + ", " + Integer.toString(tmp*4) + "($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      String a = new String();

      n.f0.accept(this, argu);
      a = (String) n.f1.accept(this, argu);

      if(simexpflag == 0){
        System.out.println("\tjalr $" + a);
      }
      else if(simexpflag == 2){
        System.out.println("\tjal " + a);        
      }
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      expflag = 0;
      String a = new String();
      
      n.f0.accept(this, argu);
      _ret = (R) n.f1.accept(this, argu);

      a = (String) _ret;
      if(simexpflag == 0){
        System.out.println("\tmove $a0 $" + a);
      }
      else if(simexpflag == 1){
        System.out.println("\tli $a0 " + a);        
      }
      else if(simexpflag == 2){
        System.out.println("\tla $a0 " + a);
      }
      System.out.println("\tjal _halloc");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      expflag = 1;

      _ret = (R) n.f0.accept(this, argu);
      opreg = (String) n.f1.accept(this, argu);
      opsimexp = (String) n.f2.accept(this, argu);
      if(simexpflag == 0){
        System.out.println("\tmove $a0 $" + opsimexp);
      }
      else if(simexpflag == 1){
        System.out.println("\tli $a0 " + opsimexp);        
      }
      else if(simexpflag == 2){
        System.out.println("\tla $a0 " + opsimexp);
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, (A) " ");
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      simexpflag = 0;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      simexpflag = 1;
      n.f0.accept(this, argu);
      _ret = (R) new String(n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      simexpflag = 2;
      n.f0.accept(this, argu);
      String s = (String) argu;
      if(s.equals(";")){
        System.out.println(n.f0.tokenImage + ": ");
      } 
      _ret = (R) new String(n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}