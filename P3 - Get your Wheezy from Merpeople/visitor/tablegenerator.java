//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class tablegenerator<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   public static Hashtable <String, classtable> SymTab = new Hashtable <String, classtable>();
   public static Hashtable <String, classnewtable> NewSymTab = new Hashtable <String, classnewtable>();
   public static int count = 257;
   public static int labelcount = 0;

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      SymTab = (Hashtable <String, classtable>) argu;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      Enumeration e = SymTab.keys();
      Hashtable <String, Integer> visited = new Hashtable <String, Integer>();
      Hashtable <String, Integer> recStack = new Hashtable <String, Integer>();

      while(e.hasMoreElements()){
        String s = new String((String) e.nextElement());
        visited.put(s, 0);
        recStack.put(s, 0);
      }

      e = SymTab.keys();
      while (e.hasMoreElements()){
        String st = new String((String) e.nextElement());
        if (isCyclic(st, visited, recStack)){
          System.out.println("Type error");
          System.exit(0);
        }
      }

      // IR generation Table generation 
      Enumeration e0 = SymTab.keys();

      while(e0.hasMoreElements()){
        String s0 = new String((String) e0.nextElement());
        String temp = s0;

        int varcount = 1;
        int methcount = 1;

        Hashtable <String, Integer> VarDec = new Hashtable <String, Integer>();
        Hashtable <String, methodnewtable> MethDec = new Hashtable <String, methodnewtable>();
        
        while(!temp.equals("null")){
          Hashtable <String, String> tempVarDec = SymTab.get(temp).VarDec;
          Hashtable <String, methodtable> tempMethDec = SymTab.get(temp).MethDec;
          
          Enumeration e1 = tempVarDec.keys();
          
          while(e1.hasMoreElements()){
            String s1 = new String((String) e1.nextElement());
            
            Enumeration ee1 = VarDec.keys();
            while(ee1.hasMoreElements()){
              String ss1 = new String((String) ee1.nextElement());
              VarDec.put(ss1, VarDec.get(ss1) + 1);
            }
            varcount++;
            VarDec.put(temp + "_" + s1, 1);
          }

          Enumeration e2 = tempMethDec.keys();

          while(e2.hasMoreElements()){
            String s2 = new String((String) e2.nextElement());
            if (!MethDec.containsKey(s2)){
              int argcount = 1;
              int varcnt = 1;
              LinkedHashMap <String, String> tmpParams = SymTab.get(temp).MethDec.get(s2).Params;
              Hashtable <String, String> tmpVarDec = SymTab.get(temp).MethDec.get(s2).VarDec;

              Hashtable <String, Integer> mParams = new Hashtable <String, Integer>();
              Hashtable <String, Integer> mVarDec = new Hashtable <String, Integer>();

              Set e3 = tmpParams.keySet();
              Iterator itr3 = e3.iterator();
              
              while(itr3.hasNext()){
                String s3 = new String((String) itr3.next());
                mParams.put(s3, argcount);
                argcount++;
              }

              Enumeration e4 = tmpVarDec.keys();
              while(e4.hasMoreElements()){
                String s4 = new String((String) e4.nextElement());
                mVarDec.put(s4, count);
                count++;
                varcnt++;
              }

              Enumeration ee2 = MethDec.keys();
              while(ee2.hasMoreElements()){
                String ss2 = new String((String) ee2.nextElement());
                methodnewtable M1 = MethDec.get(ss2);
                M1.index = M1.index + 1;
                MethDec.put(ss2, M1);
              }

              methodnewtable M = new methodnewtable();
              M.Params = mParams;
              M.VarDec = mVarDec;
              M.args = argcount;
              M.index = 0;
              M.varcount = varcnt - 1;
              methcount++;
              MethDec.put(s2, M);  
            }
            else{
              int idx = MethDec.get(s2).index;
              Enumeration ee2 = MethDec.keys();
              while(ee2.hasMoreElements()){
                String ss2 = new String((String) ee2.nextElement());
                int idx2 = MethDec.get(ss2).index;
                if(idx2 < idx){
                  methodnewtable M1 = MethDec.get(ss2);
                  M1.index = idx2 + 1;
                  MethDec.put(ss2, M1);
                }
              }
              methodnewtable M1 = MethDec.get(s2);
              M1.index = 0;
              MethDec.put(s2, M1);
            }
          }

          temp = SymTab.get(temp).parent;
        }

        classnewtable C = new classnewtable();
        C.VarDec = VarDec;
        C.MethDec = MethDec;
        C.varcount = varcount - 1;
        C.methcount = methcount - 1;

        String code =  new String();
        
        code = "BEGIN\n";
        code = code + "MOVE TEMP " + Integer.toString(count) + " HALLOCATE " + Integer.toString(methcount*4 - 4) + "\n";
        code = code + "MOVE TEMP " + Integer.toString(count + 1) + " HALLOCATE " + Integer.toString(varcount*4) + "\n";
        
        Enumeration e01 = MethDec.keys();
        while(e01.hasMoreElements()){
          String s01 = new String((String) e01.nextElement());

          code = code + "HSTORE TEMP " + Integer.toString(count) + " " + Integer.toString(MethDec.get(s01).index * 4) + " " + s0 + "_" + s01 + "\n";
        }
        if(varcount != 0){
          code = code + "MOVE TEMP " + Integer.toString(count + 2) + " 4\n";
          code = code + "L" + Integer.toString(labelcount) + " ";
          labelcount++;
          code = code + "CJUMP LE TEMP " + Integer.toString(count + 2) + " " + Integer.toString(varcount*4 - 1) + " ";
          code = code + "L" + Integer.toString(labelcount) + "\n";
          code = code + "HSTORE PLUS TEMP " + Integer.toString(count+1) + " TEMP " + Integer.toString(count+2) + " 0 0\n";
          code = code + "MOVE TEMP " + Integer.toString(count+2) + " PLUS TEMP " + Integer.toString(count+2) + " 4\n";
          code = code + "JUMP L" + Integer.toString(labelcount - 1) + "\n";
        }
        code = code + "L" + Integer.toString(labelcount) + " ";
        labelcount++;
        code = code + "HSTORE TEMP " + Integer.toString(count+1) + " 0 TEMP " + Integer.toString(count) + "\n";
        code = code + "RETURN\n";
        code = code + "TEMP " + Integer.toString(count+1) + "\n";
        code = code + "END\n";
        count += 3;

        C.code = code;
        NewSymTab.put(s0, C);
      }

      myobject O = new myobject();
      O.SymTab = SymTab;
      O.NewSymTab = NewSymTab;
      O.count = count;
      O.labelcount = labelcount;
      
      return (R) O;
   }

   public boolean isCyclic (String s, Hashtable <String, Integer> v, Hashtable <String, Integer> r){
    if(v.get(s) == 0){
      v.put(s, 1);
      r.put(s, 1);

      if (SymTab.containsKey(SymTab.get(s).parent) == false && !SymTab.get(s).parent.equals("null")){
        System.out.println("Symbol not found");
        System.exit(0);
      }

      if (!SymTab.get(s).parent.equals("null")){
        String t = SymTab.get(s).parent;
        if (v.get(t) == 0 && isCyclic(t, v, r)){
          return true;
        }
        else if (r.get(t) == 1){
          return true;
        }
      }
    }
    r.put(s, 0);
    return false;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      
      classtable temp = new classtable();
      temp.VarDec = new Hashtable <String, String>();
      temp.MethDec = new Hashtable <String, methodtable>();
      temp.parent = new String("null");
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, (A) temp.VarDec);
      n.f4.accept(this, (A) temp.MethDec);
      n.f5.accept(this, argu);

      if (SymTab.containsKey(n.f1.f0.tokenImage)){
        System.out.println("Type error");
        System.exit(0);
      }

      SymTab.put(n.f1.f0.tokenImage, temp);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;

      classtable temp = new classtable();
      temp.VarDec = new Hashtable <String, String>();
      temp.MethDec = new Hashtable <String, methodtable>();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      temp.parent = new String(n.f3.f0.tokenImage);
      n.f4.accept(this, argu);
      n.f5.accept(this, (A) temp.VarDec);
      n.f6.accept(this, (A) temp.MethDec);
      n.f7.accept(this, argu);

      if (SymTab.containsKey(n.f1.f0.tokenImage)){
        System.out.println("Type error");
        System.exit(0);
      }

      SymTab.put(n.f1.f0.tokenImage, temp);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;

      Hashtable <String, String> VarDec = (Hashtable <String, String>) argu;

      R x = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      if (VarDec.containsKey(n.f1.f0.tokenImage)){
        System.out.println("Type error");
        System.exit(0);
      }
      
      VarDec.put(n.f1.f0.tokenImage, (String) x);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;

      Hashtable <String, methodtable> MethDec = (Hashtable <String, methodtable>) argu;

      methodtable temp = new methodtable();
      temp.Params = new LinkedHashMap <String, String>();
      temp.VarDec = new Hashtable <String, String>();

      n.f0.accept(this, argu);
      R x = n.f1.accept(this, argu);
      temp.type = new String((String) x);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A) temp.Params);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, (A) temp.VarDec);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      if (MethDec.containsKey(n.f2.f0.tokenImage)){
        System.out.println("Type error");
        System.exit(0);
      }

      Enumeration e = temp.VarDec.keys();

      while (e.hasMoreElements()){
        if (temp.Params.containsKey((String) e.nextElement())){
          System.out.println("Type error");
          System.exit(0);
        }
      }

      MethDec.put(n.f2.f0.tokenImage, temp);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;

      LinkedHashMap <String, String> Params = (LinkedHashMap <String, String>) argu;

      R x = n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      if (Params.containsKey(n.f1.f0.tokenImage)){
        System.out.println("Type error");
        System.exit(0);
      }

      Params.put(n.f1.f0.tokenImage, (String) x);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      String _ret = new String("int[]");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      String _ret = new String("boolean");
      n.f0.accept(this, argu);
      return (R) _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      String _ret = new String("int");
      n.f0.accept(this, argu);
      return (R) _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      n.f0.accept(this, argu);
      String x = new String(n.f0.tokenImage);
      return (R) x;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
