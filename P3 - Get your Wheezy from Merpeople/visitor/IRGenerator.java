//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class IRGenerator<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   public static myobject O = new myobject();
   public static Hashtable <String, classtable> SymTab = new Hashtable <String, classtable>();
   public static Hashtable <String, classnewtable> NewSymTab = new Hashtable <String, classnewtable>();
   public static int count = 257;
   public static int labelcount = 0;

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      O = (myobject) argu;
      SymTab = O.SymTab;
      NewSymTab = O.NewSymTab;
      count = O.count;
      labelcount = O.labelcount;

      pair p = new pair();
      p.first = new String(";");
      p.second = new String(";");
      argu = (A) p;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      String code = new String();
      code = "MAIN\n";
      System.out.println(code);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);

      code = "END\n";
      System.out.println(code);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;

      pair p = new pair();
      p.first = new String(n.f1.f0.tokenImage);
      p.second = new String(";");

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A) p);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;

      pair p = new pair();
      p.first = new String(n.f1.f0.tokenImage);
      p.second = new String(";");

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, (A) p);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;

      pair p = new pair();
      p = (pair) argu;
      p.second = new String(n.f2.f0.tokenImage);

      String code = new String();
      int idx = NewSymTab.get(p.first).MethDec.get(n.f2.f0.tokenImage).args;
      code = "\n" + p.first + "_" + n.f2.f0.tokenImage + " [ " + Integer.toString(idx) + " ]\n";
      code = code + "BEGIN\n";
      System.out.println(code);

      String c1;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, (A) p);
      n.f9.accept(this, argu);
      c1 = (String) n.f10.accept(this, (A) p);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      code = "RETURN\n";
      code = code + c1 + "\n";
      code = code + "END\n";
      System.out.println(code);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
    try
      {R _ret=null;
            String c1, c2;
            c1 = (String) n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            c2 = (String) n.f2.accept(this, argu);
            n.f3.accept(this, argu);
      
            String code = new String();
            code = "MOVE " + c1 + " " + c2 + "\n";
            System.out.println(code);
      
            pair p = new pair();
            p = (pair) argu;
      
            if(!p.first.equals(";") && !p.second.equals(";")){
              if(!NewSymTab.get(p.first).MethDec.get(p.second).VarDec.containsKey(n.f0.f0.tokenImage)){
                if(!NewSymTab.get(p.first).MethDec.get(p.second).Params.containsKey(n.f0.f0.tokenImage)){
                  if(NewSymTab.get(p.first).VarDec.containsKey(p.first + "_" + n.f0.f0.tokenImage)){
                    int idx = NewSymTab.get(p.first).VarDec.get(p.first + "_" + n.f0.f0.tokenImage);
                    code = "HSTORE TEMP 0 " + Integer.toString(idx*4) + " " + c2 + "\n";
                    System.out.println(code);
                  }
                  else{
                    String temp = p.first;
                    while(!temp.equals("null")){
                      if(NewSymTab.get(temp).VarDec.containsKey(temp + "_" + n.f0.f0.tokenImage)){
                        int idx = NewSymTab.get(temp).VarDec.get(temp + "_" + n.f0.f0.tokenImage);
                        code = "HSTORE TEMP 0 " + Integer.toString(idx*4) + " " + c2 + "\n";
                        System.out.println(code);
                        break;
                      }
                      temp = SymTab.get(temp).parent;
                    }
                  }
                }
              }
            }
      
            return _ret;}
            catch(Exception eee){
              System.out.println("P3");
              return null;
            }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String c1, c2, c3;
      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      c2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      c3 = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " " + "PLUS " + c2 + " 1\n";
      code = code + "HSTORE PLUS TIMES TEMP " + Integer.toString(count) + " 4 " + c1 + " 0 " + c3 + "\n";
      System.out.println(code);
      count += 1;

      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      String code1;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      code1 = (String) n.f2.accept(this, argu);

      int l1 = labelcount;
      labelcount += 1;

      String code = new String();
      code = "CJUMP " + code1 + " L" + Integer.toString(l1) + "\n";
      System.out.println(code);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      code = "L" + Integer.toString(l1) + " NOOP\n";
      System.out.println(code);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      String code1;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      code1 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      int l1 = labelcount;
      int l2 = labelcount+1;
      labelcount += 2;

      String code = new String();
      code = "CJUMP " + code1 + " L" + Integer.toString(l1) + "\n";
      System.out.println(code);

      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      code = "JUMP L" + Integer.toString(l2) + "\n";
      code = code + "L" + Integer.toString(l1) + " ";
      System.out.println(code);

      n.f6.accept(this, argu);
      
      code = "L" + Integer.toString(l2) + " NOOP\n";
      System.out.println(code);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      String code1;
      String code = new String();
      int l1 = labelcount;
      int l2 = labelcount+1;
      int cnt = count;
      count++;
      labelcount += 2;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      code = "L" + Integer.toString(l1) + " CJUMP BEGIN\n";
      System.out.println(code);

      code1 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      code = "MOVE TEMP " + Integer.toString(cnt) + " " + code1 + "\n";
      code = code + "RETURN\nTEMP " + Integer.toString(cnt) + "\n" + "END\n";
      code = code + " L" + Integer.toString(l2) + "\n";
      System.out.println(code);

      n.f4.accept(this, argu);

      code = "JUMP L" + Integer.toString(l1) + "\n";
      code = code + "L" + Integer.toString(l2) + " NOOP\n";
      labelcount += 2;
      System.out.println(code);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;

      String code1;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      code1 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      String code = new String();
      code = "PRINT " + code1 + "\n";
      System.out.println(code);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String c1, c2;

      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      c2 = (String) n.f2.accept(this, argu);

      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " TIMES " + c1 + c2 + "\n";
      System.out.println(code);
      code = "TEMP " + Integer.toString(count) + " ";
      count++;
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String c1, c2;

      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      c2 = (String) n.f2.accept(this, argu);

      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " PLUS " + c1 + c2 + "\n";
      code = code + "CJUMP NE TEMP " + Integer.toString(count) + " 0 " + "L" + Integer.toString(labelcount) + "\n";
      code = code + "MOVE TEMP " + Integer.toString(count) + " 1\n";
      code = code + "JUMP L" + Integer.toString(labelcount + 1) + "\n";
      code = code + "L" + Integer.toString(labelcount) + " MOVE TEMP " + Integer.toString(count) + " 0\n";
      code = code + "L" + Integer.toString(labelcount + 1) + " NOOP\n";
      labelcount += 2;
      System.out.println(code);
      code = "TEMP " + Integer.toString(count) + " ";
      count++;
      _ret = (R) code;
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String c1, c2;

      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      c2 = (String) n.f2.accept(this, argu);

      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " LE " + c1 + c2 + "\n";
      System.out.println(code);
      code = "TEMP " + Integer.toString(count) + " ";
      count++;
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String c1, c2;

      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      c2 = (String) n.f2.accept(this, argu);

      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " NE " + c1 + c2 + "\n";
      System.out.println(code);
      code = "TEMP " + Integer.toString(count) + " ";
      count++;
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String c1, c2;

      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      c2 = (String) n.f2.accept(this, argu);

      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " PLUS " + c1 + c2 + "\n";
      System.out.println(code);
      code = "TEMP " + Integer.toString(count) + " ";
      count++;
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String c1, c2;

      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      c2 = (String) n.f2.accept(this, argu);

      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " MINUS " + c1 + c2 + "\n";
      System.out.println(code);
      code = "TEMP " + Integer.toString(count) + " ";
      count++;
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String c1, c2;

      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      c2 = (String) n.f2.accept(this, argu);

      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " TIMES " + c1 + c2 + "\n";
      System.out.println(code);
      code = "TEMP " + Integer.toString(count) + " ";
      count++;
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String c1, c2;

      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      c2 = (String) n.f2.accept(this, argu);

      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " DIV " + c1 + c2 + "\n";
      System.out.println(code);
      code = "TEMP " + Integer.toString(count) + " ";
      count++;
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;

      String c1, c2;
      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      c2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count) + " " + "PLUS " + c2 + " 1\n";
      code = code + "MOVE TEMP " + Integer.toString(count+1) + "\n";
      code = code + "BEGIN\n";
      code = code + "HLOAD TEMP " + Integer.toString(count+2) + " PLUS TIMES TEMP " + Integer.toString(count) + " 4 ";
      code = code + c1 + " 0\n";
      code = code + "RETURN\n TEMP " + Integer.toString(count+2) + "\n" + "END\n";
      System.out.println(code);
      code = "TEMP " + Integer.toString(count+1) + " ";
      count += 3;
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;

      String c1;
      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      String code = new String();
      code = code + "MOVE TEMP " + Integer.toString(count) + "\n";
      code = code + "BEGIN\n";
      code = code + "HLOAD TEMP " + Integer.toString(count+1) + " " + c1 + " 0\n";
      code = code + "RETURN\n TEMP " + Integer.toString(count+1) + "\n" + "END\n";
      System.out.println(code);
      code = "TEMP " + Integer.toString(count) + " ";
      count += 2;
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;

      String c1, elist;
      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      elist = (String) n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      int idx = -1;

      Enumeration e0 = NewSymTab.keys();
      while(e0.hasMoreElements()){
        String s0 = new String((String) e0.nextElement());
        
        Enumeration e1 = NewSymTab.get(s0).MethDec.keys();
        while(e1.hasMoreElements()){
          String s1 = new String((String) e1.nextElement());
          if(s1.equals(n.f2.f0.tokenImage)){
            idx = NewSymTab.get(s0).MethDec.get(s1).index;
            break;
          }
        }

        if(idx != -1) break;
      }
      String elist1 = new String();
      elist1 = "TEMP " + Integer.toString(count) + " ";
      if(elist != null) elist1 = elist1 + elist;
      String code = new String();
      code = "MOVE TEMP " + Integer.toString(count+3) + " " + "CALL\nBEGIN\n";
      code = code + "MOVE TEMP " + Integer.toString(count) + " " + c1;
      code = code + "HLOAD TEMP " + Integer.toString(count+1) + " TEMP " + Integer.toString(count) + " 0\n";
      code = code + "HLOAD TEMP " + Integer.toString(count+2) + " TEMP " + Integer.toString(count+1) + " " + Integer.toString(idx*4) + "\n";
      code = code + "RETURN\nTEMP " + Integer.toString(count+2) + "\n";
      code = code + "END\n";
      code = code + "( " + elist1 + " )\n";
      System.out.println(code);
      
      code = "TEMP " + Integer.toString(count+3) + " ";
      count += 4;
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String c1;
      String code1 = new String(" ");
      stringpair sp = new stringpair();
      sp.pp = (pair) argu;
      sp.ss = code1;

      c1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, (A) sp);

      String code = new String();
      code = c1 + " " + code1 + " ";
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      String c1, c2;
      stringpair sp;
      sp = (stringpair) argu;
      c1 = sp.ss;
      argu = (A) sp.pp;

      n.f0.accept(this, argu);
      c2 = (String) n.f1.accept(this, argu);

      c1 = c1 + " " + c2;

      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;

      String code = new String();
      code = n.f0.tokenImage + " ";

      n.f0.accept(this, argu);
      
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;

      String code = new String();
      code = Integer.toString(1) + " ";

      n.f0.accept(this, argu);

      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;

      String code = new String();
      code = Integer.toString(0) + " ";

      n.f0.accept(this, argu);

      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;

      pair p = new pair();
      p = (pair) argu;

      String code = new String();
      code = " ";

      if(!p.first.equals(";") && !p.second.equals(";")){
        if(NewSymTab.get(p.first).MethDec.get(p.second).VarDec.containsKey(n.f0.tokenImage)){
          int idx = NewSymTab.get(p.first).MethDec.get(p.second).VarDec.get(n.f0.tokenImage);
          code = "TEMP " + Integer.toString(idx) + " ";
        }
        else if(NewSymTab.get(p.first).MethDec.get(p.second).Params.containsKey(n.f0.tokenImage)){
          int idx = NewSymTab.get(p.first).MethDec.get(p.second).Params.get(n.f0.tokenImage);
          code = "TEMP " + Integer.toString(idx) + " ";
        }
        else if(NewSymTab.get(p.first).VarDec.containsKey(p.first + "_" + n.f0.tokenImage)){
          int idx = NewSymTab.get(p.first).VarDec.get(p.first + "_" + n.f0.tokenImage);
          code = "HLOAD TEMP " + Integer.toString(count) + " TEMP 0 " + Integer.toString(idx*4) + "\n";
          System.out.println(code);
          code = "TEMP " + Integer.toString(count) + " ";
          count++;
        }
        else{
          String temp = p.first;
          while(!temp.equals("null")){
            if(NewSymTab.get(temp).VarDec.containsKey(temp + "_" + n.f0.tokenImage)){
              int idx = NewSymTab.get(temp).VarDec.get(temp + "_" + n.f0.tokenImage);
              code = "HLOAD TEMP " + Integer.toString(count) + " TEMP 0 " + Integer.toString(idx*4) + "\n";
              System.out.println(code);
              code = "TEMP " + Integer.toString(count) + " ";
              count++;
              break;
            }
            temp = SymTab.get(temp).parent;
          }
        }
      }

      n.f0.accept(this, argu);
      
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;

      String code = new String();
      code = "TEMP 0\n";
      
      n.f0.accept(this, argu);
      
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;

      String code1 = new String();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      code1 = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      String code = new String();
      code = "BEGIN\n";
      code = code + "MOVE TEMP " + Integer.toString(count) + " HALLOCATE TIMES PLUS " + code1 + " 1 4\n";
      code = code + "MOVE TEMP " + Integer.toString(count+1) + " 4\n";
      code = code + "L" + Integer.toString(labelcount) + " CJUMP LE TEMP " + Integer.toString(count+1);
      code = code + " MINUS TIMES PLUS " + code1 + " 1 4 1 L" + Integer.toString(labelcount+1) + "\n";
      code = code + "HSTORE PLUS TEMP " + Integer.toString(count) + " TEMP " + Integer.toString(count+1) + " 0 0\n";
      code = code + "MOVE TEMP " + Integer.toString(count+1) + " PLUS TEMP " + Integer.toString(count+1) + " 4\n";
      code = code + "JUMP L" + Integer.toString(labelcount) + "\n";
      code = code + "L" + Integer.toString(labelcount+1) + " HSTORE TEMP " + Integer.toString(count) + " 0 TIMES ";
      code = code + code1 + " 4\n";
      code = code + "RETURN\n";
      code = code + "TEMP " + Integer.toString(count) + "\nEND\n";
      labelcount += 2;
      count += 2;
      _ret = (R) code;

      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;;

      String code = new String();
      code = NewSymTab.get(n.f1.f0.tokenImage).code;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      _ret = (R) code;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      String code1 = new String();
      n.f0.accept(this, argu);
      code1 = (String) n.f1.accept(this, argu);

      String code = new String();
      code = "CJUMP NE " + code1 + " 1 " + "L" + Integer.toString(labelcount) + "\n";
      code = code + "MOVE TEMP " + Integer.toString(count) + " 1\n";
      code = code + "JUMP L" + Integer.toString(labelcount + 1) + "\n";
      code = code + "L" + Integer.toString(labelcount) + " MOVE TEMP " + Integer.toString(count) + " 0\n";
      code = code + "L" + Integer.toString(labelcount + 1) + " NOOP\n";
      labelcount += 2;
      System.out.println(code);
      code1 = "TEMP " + Integer.toString(count) + " ";
      count++;

      _ret = (R) code1;

      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}