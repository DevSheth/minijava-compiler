//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class typecheck<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   public static Hashtable <String, classtable> SymTab = new Hashtable <String, classtable>();

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      
      SymTab = (Hashtable <String, classtable>) argu;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      System.out.println("Program type checked successfully");
      return (R) SymTab;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;

      pair q = new pair();
      q.first = new String(";");
      q.second = new String(";");

      n.f0.accept(this, argu);
      n.f1.accept(this, (A) q);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, (A) q);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, (A) q);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      String x = new String(n.f1.f0.tokenImage);

      pair q = new pair();
      q.first = new String(";");
      q.second = new String(";");

      n.f0.accept(this, argu);
      n.f1.accept(this, (A) q);
      n.f2.accept(this, argu);
      n.f3.accept(this, (A) q);
      n.f4.accept(this, (A) x);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      String x = new String(n.f1.f0.tokenImage);

      pair q = new pair();
      q.first = new String(";");
      q.second = new String(";");

      n.f0.accept(this, argu);
      n.f1.accept(this, (A) q);
      n.f2.accept(this, argu);
      n.f3.accept(this, (A) q);
      n.f4.accept(this, argu);
      n.f5.accept(this, (A) q);
      n.f6.accept(this, (A) x);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   public boolean checkSignature(methodtable m1, methodtable m2){
      Set s1 = m1.Params.keySet();
      Set s2 = m2.Params.keySet();
      Iterator itr1 = s1.iterator();
      Iterator itr2 = s2.iterator();

      while(itr1.hasNext() && itr2.hasNext()){
        String x = new String(m1.Params.get((String) itr1.next()));
        String y = new String(m2.Params.get((String) itr2.next()));
        // System.out.println(x + y);
        if (!x.equals(y)){
          return false;
        }
      }
      if (itr1.hasNext() || itr2.hasNext()){
        return false;
      }

      String y = new String(m1.type);
      String x = new String(m2.type);

      if(!x.equals(y)){
        String z = new String();
        z = y;
        if (!SymTab.containsKey(z)){
          return false;
        }
        while(!SymTab.get(z).parent.equals("null") && !x.equals(z)){
          z = SymTab.get(z).parent;
        }
        if(!x.equals(z)){
          return false;
        }
      }

      return true;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      String x = new String();
      String y = new String();
      String z = new String((String) argu);
      x = SymTab.get((String) argu).MethDec.get(n.f2.f0.tokenImage).type;

      pair q = new pair();
      q.first = new String(";");
      q.second = new String(";");

      pair p = new pair();
      p.first = new String((String) argu);
      p.second = new String(n.f2.f0.tokenImage);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, (A) q);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A) q);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, (A) q);
      n.f8.accept(this, (A) p);
      n.f9.accept(this, argu);
      y = (String) n.f10.accept(this, (A) p);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      if (!SymTab.get(z).parent.equals("null")){
        z = SymTab.get(z).parent;
        while (!SymTab.get(z).parent.equals("null") && !SymTab.get(z).MethDec.containsKey(n.f2.f0.tokenImage)){
          z = SymTab.get(z).parent;
        }
        if (SymTab.get(z).MethDec.containsKey(n.f2.f0.tokenImage)){
          if (!checkSignature(SymTab.get((String) argu).MethDec.get(n.f2.f0.tokenImage), SymTab.get(z).MethDec.get(n.f2.f0.tokenImage))){
            System.out.println("Type error");
            System.exit(0);
          }
        }
      }

      if(!x.equals(y)){
        String w = new String();
        w = y;
        if (!SymTab.containsKey(w)){
          System.out.println("Type error");
          System.exit(0);
        }
        while(!SymTab.get(w).parent.equals("null") && !x.equals(w)){
          w = SymTab.get(w).parent;
        }
        if(!x.equals(w)){
          System.out.println("Type error");
          System.exit(0);
        }
      }

      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      
      pair p = new pair();
      p.first = new String("null");
      p.second = new String("null");

      n.f0.accept(this, (A) p);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String x = new String();
      String y = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      y = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      if(!x.equals(y)){
        String z = new String();
        z = y;
        if (!SymTab.containsKey(z)){
          System.out.println("Type error");
          System.exit(0);
        }
        while(!SymTab.get(z).parent.equals("null") && !x.equals(z)){
          z = SymTab.get(z).parent;
        }
        if(!x.equals(z)){
          System.out.println("Type error");
          System.exit(0);
        }
      }

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String x = new String();
      String y = new String();
      String z = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      y = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      z = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      if(!x.equals("int[]") || !y.equals("int") || !z.equals("int")){
        System.out.println("Type error");
        System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      String x = new String();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      x = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(!x.equals("boolean")){
        System.out.println("Type error");
        System.exit(0);
      }

      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      String x = new String();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      x = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      if(!x.equals("boolean")){
        System.out.println("Type error");
        System.exit(0);
      }

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      String x = new String();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      x = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if(!x.equals("boolean")){
        System.out.println("Type error");
        System.exit(0);
      }

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      String x = new String();
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      x = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(!x.equals("int")){
        System.out.println("Type error");
        System.exit(0);
      }

      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      String _ret = new String();
      _ret = (String) n.f0.accept(this, argu);
      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      String _ret = new String("boolean");
      String x = new String();
      String y = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      y = (String) n.f2.accept(this, argu);

      if(!x.equals("boolean") || !y.equals("boolean")){
        System.out.println("Type error");
        System.exit(0);
      }
      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      String _ret = new String("boolean");
      String x = new String();
      String y = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      y = (String) n.f2.accept(this, argu);

      if(!x.equals("boolean") || !y.equals("boolean")){
        System.out.println("Type error");
        System.exit(0);
      }
      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      String _ret = new String("boolean");
      String x = new String();
      String y = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      y = (String) n.f2.accept(this, argu);

      if(!x.equals("int") || !y.equals("int")){
        System.out.println("Type error");
        System.exit(0);
      }
      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      String _ret = new String("boolean");
      String x = new String();
      String y = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      y = (String) n.f2.accept(this, argu);

      if(!x.equals(y)){
        String z = new String();
        z = y;
        if (!SymTab.containsKey(z)){
          System.out.println("Type error");
          System.exit(0);
        }
        while(!SymTab.get(z).parent.equals("null") && !x.equals(z)){
          z = SymTab.get(z).parent;
        }
        if(!x.equals(z)){
          z = x;
          if (!SymTab.containsKey(z)){
            System.out.println("Type error");
            System.exit(0);
          }
          while(!SymTab.get(z).parent.equals("null") && !y.equals(z)){
            z = SymTab.get(z).parent;
          }
          if(!y.equals(z)){
            System.out.println("Type error");
            System.exit(0);
          }
        }
      }
      
      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      String _ret = new String("int");
      String x = new String();
      String y = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      y = (String) n.f2.accept(this, argu);

      if(!x.equals("int") || !y.equals("int")){
        System.out.println("Type error");
        System.exit(0);
      }

      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      String _ret = new String("int");
      String x = new String();
      String y = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      y = (String) n.f2.accept(this, argu);

      if(!x.equals("int") || !y.equals("int")){
        System.out.println("Type error");
        System.exit(0);
      }

      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      String _ret = new String("int");
      String x = new String();
      String y = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      y = (String) n.f2.accept(this, argu);

      if(!x.equals("int") || !y.equals("int")){
        System.out.println("Type error");
        System.exit(0);
      }

      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      String _ret = new String("int");
      String x = new String();
      String y = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      y = (String) n.f2.accept(this, argu);

      if(!x.equals("int") || !y.equals("int")){
        System.out.println("Type error");
        System.exit(0);
      }

      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      String _ret = new String("int");
      String x = new String();
      String y = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      y = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(!x.equals("int[]") || !y.equals("int")){
        System.out.println("Type error");
        System.exit(0);
      }

      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      String _ret = new String("int");
      String x = new String();

      x = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      if(!x.equals("int[]")){
        System.out.println("Type error");
        System.exit(0);
      }

      return (R) _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      String y = new String();

      pair q = new pair();
      q.first = new String(";");
      q.second = new String(";");

      String z = new String();
      LinkedList <String> list = new LinkedList <String>();
      pair p = (pair) argu;
      listpair LP = new listpair();
      LP.P = p;
      LP.LL = list; 

      z = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, (A) q);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A) LP);
      n.f5.accept(this, argu);

      if (!SymTab.containsKey(z)){
        System.out.println("Type error");
        System.exit(0);
      }

      LinkedHashMap <String, String> Params = new LinkedHashMap <String, String>();
      
      if (!SymTab.get(z).MethDec.containsKey(n.f2.f0.tokenImage)){
        String x = new String(z);
        while(!SymTab.get(x).parent.equals("null") && !SymTab.get(x).MethDec.containsKey(n.f2.f0.tokenImage)){
          x = SymTab.get(x).parent;
        }
        if (!SymTab.get(x).MethDec.containsKey(n.f2.f0.tokenImage)){
          System.out.println("Symbol not found");
          System.exit(0);
        }
        else{
          y = SymTab.get(x).MethDec.get(n.f2.f0.tokenImage).type;
          Params = SymTab.get(x).MethDec.get(n.f2.f0.tokenImage).Params;
        }
      }
      else{
        y = SymTab.get(z).MethDec.get(n.f2.f0.tokenImage).type;
        Params = SymTab.get(z).MethDec.get(n.f2.f0.tokenImage).Params;
      }

      Set s = Params.keySet();
      Iterator itr = s.iterator();
      int i = 0;

      if (itr.hasNext() && list == null){
        System.out.println("Type error");
        System.exit(0);
      }

      while(itr.hasNext() && (i < list.size())){
        String s1 = new String(Params.get((String) itr.next()));
        String s2 = new String(list.get(i));
        if (!s1.equals(s2)){
          String s3 = new String();
          s3 = s2;
          if (!SymTab.containsKey(s3)){
            System.out.println("Type error");
            System.exit(0);
          }
          while(!SymTab.get(s3).parent.equals("null") && !s1.equals(s3)){
            s3 = SymTab.get(s3).parent;
          }
          if(!s1.equals(s3)){
            System.out.println("Type error");
            System.exit(0);
          }
        }
        i++;
      }
      if (itr.hasNext() || (i < list.size())){
        System.out.println("Type error");
        System.exit(0);
      }

      return (R) y;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      listpair LP = (listpair) argu;
      String x = new String();

      x = (String) n.f0.accept(this, (A) LP.P);
      LP.LL.add(x);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      listpair LP = (listpair) argu;
      String x = new String();

      n.f0.accept(this, argu);
      x = (String) n.f1.accept(this, (A) LP.P);
      LP.LL.add(x);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      String _ret = new String();
      _ret = (String) n.f0.accept(this, argu);
      return (R) _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      String _ret = new String("int");
      n.f0.accept(this, argu);
      return (R) _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      String _ret = new String("boolean");
      n.f0.accept(this, argu);
      return (R) _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      String _ret = new String("boolean");
      n.f0.accept(this, argu);
      return (R) _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      pair p = (pair) argu;

      if (p.first.equals(";")){
        return _ret;
      }
      else if (p.first.equals("null")){
        if (!SymTab.containsKey(n.f0.tokenImage)){
          // System.out.println(n.f0.tokenImage);
          System.out.println("Symbol not found");
          System.exit(0);
        }
      }
      else{
        if (!SymTab.get(p.first).MethDec.get(p.second).Params.containsKey(n.f0.tokenImage)){
          if (!SymTab.get(p.first).MethDec.get(p.second).VarDec.containsKey(n.f0.tokenImage)){
            if (!SymTab.get(p.first).VarDec.containsKey(n.f0.tokenImage)){
              String x = new String(p.first);
              while(!SymTab.get(x).parent.equals("null") && !SymTab.get(x).VarDec.containsKey(n.f0.tokenImage)){
                x = SymTab.get(x).parent;
              }
              if (!SymTab.get(x).VarDec.containsKey(n.f0.tokenImage)){
                // System.out.println(n.f0.tokenImage + p.first + p.second);
                System.out.println("Symbol not found");
                System.exit(0);
              }
              else {
                String y = new String(SymTab.get(x).VarDec.get(n.f0.tokenImage));
                return (R) y;
              }
            }
            else {
              String y = new String(SymTab.get(p.first).VarDec.get(n.f0.tokenImage));
              return (R) y;
            }
          }
          else{
            String y = new String(SymTab.get(p.first).MethDec.get(p.second).VarDec.get(n.f0.tokenImage));
            return (R) y;
          }
        }
        else{
          String y = new String(SymTab.get(p.first).MethDec.get(p.second).Params.get(n.f0.tokenImage));
          return (R) y;
        }
      }

      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      pair p = (pair) argu;
      String x = new String(p.first);

      n.f0.accept(this, argu);
      
      return (R) x;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      String x = new String();
      String y = new String("int[]"); 

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      x = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if (!x.equals("int")){
        System.out.println("Type error");
        System.exit(0);
      }

      return (R) y;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;

      pair q = new pair();
      q.first = new String(";");
      q.second = new String(";");

      n.f0.accept(this, argu);
      n.f1.accept(this, (A) q);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if (!SymTab.containsKey(n.f1.f0.tokenImage)){
        System.out.println("Symbol not found");
        System.exit(0);
      }
      String x = new String(n.f1.f0.tokenImage);

      return (R) x;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      String x = new String();

      n.f0.accept(this, argu);
      x = (String) n.f1.accept(this, argu);

      if(!x.equals("boolean")){
        System.out.println("Type error");
        System.exit(0);
      }

      return (R) x;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      String x = new String();
      
      n.f0.accept(this, argu);
      x = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return (R) x;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
