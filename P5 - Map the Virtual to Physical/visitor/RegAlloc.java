//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class RegAlloc <R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   public static table T = new table();
   public Hashtable <String, HashMap <Integer, registers>> R = new Hashtable <String, HashMap <Integer, registers>>();
   public Hashtable <String, Integer> Spills = new Hashtable <String, Integer>();
   public static int count = 0;
   public static int offset, argoffset;
   public static int use = 1, second = 0, printlabel = 1;

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      T = (table) argu;
      Enumeration e = T.LT.keys();
      while(e.hasMoreElements()){
        String ss = new String((String) e.nextElement());
        Calculate(ss);
      }
      Enumeration ee = T.LT.keys();
      while(ee.hasMoreElements()){
        String ss = new String((String) ee.nextElement());
        LinearScan(ss);
      }

      int x, y = T.LE.maxcounts.get("_MAIN"), z;
      // if(y > 4) z = y - 4;
      // else z = 0;
      z = 0;
      if(T.LE.numcalls.get("_MAIN") == 0) x = 0 + Spills.get("_MAIN") + z;
      else x = 10 + Spills.get("_MAIN") + z; 
      System.out.println("MAIN [0] [" + Integer.toString(x) + "] [" + Integer.toString(y) + "]");
      offset = x - Spills.get("_MAIN");
      argoffset = z;

      argu = (A) ";;";
      n.f0.accept(this, argu);
      n.f1.accept(this, (A) "_MAIN");
      n.f2.accept(this, argu);

      System.out.println("END");
      if(Spills.get("_MAIN") > 0) System.out.println("// SPILLED");
      else System.out.println("// NOTSPILLED");

      count = 0;

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   public void Calculate(String s){
    HashMap <Integer, registers> rg = new HashMap <Integer, registers>();
    Set <Integer> temps = new HashSet <Integer>();
    ArrayList <Set <Integer>> unions = new ArrayList <Set <Integer>>();
    int i;
    for (i = 0; i < T.LT.get(s).in.size(); i++){
      Set <Integer> u = new HashSet <Integer>();
      u.addAll(T.LT.get(s).in.get(i));
      u.addAll(T.LT.get(s).def.get(i));
      temps.addAll(u);
      unions.add(u);
    }
    for(Integer j : temps){
      registers rr = new registers();
      for (i = 0; i < T.LT.get(s).in.size(); i++){
        if(unions.get(i).contains(j)){
          rr.start = new Integer(i);
          break;
        }
      }
      for (i = T.LT.get(s).in.size()-1; i >= 0; i--){
        if(unions.get(i).contains(j)){
          rr.end = new Integer(i);
          break;
        }
      }
      rg.put(j, rr);
      // System.out.print("TEMP " + j + " ");
      // System.out.print(rr.start + " ");
      // System.out.println(rr.end);
    }
    R.put(s, rg);
    // System.out.println("\tdebug");
   }

   public static HashMap <Integer, registers> sortByStart(HashMap <Integer, registers> hm) 
    { 
        // Create a list from elements of HashMap 
        List<Map.Entry<Integer, registers> > list = 
               new LinkedList<Map.Entry<Integer, registers> >(hm.entrySet()); 
  
        // Sort the list 
        Collections.sort(list, new Comparator<Map.Entry<Integer, registers> >() { 
            public int compare(Map.Entry<Integer, registers> o1,  
                               Map.Entry<Integer, registers> o2) 
            { 
                if(o1.getValue().start == o2.getValue().start) return 0;
                if(o1.getValue().start < o2.getValue().start) return -1;
                if(o1.getValue().start > o2.getValue().start) return 1;
                return 0;
                // return (o1.getValue().start).compareTo(o2.getValue().start); 
            } 
        }); 
          
        // put data from sorted list to hashmap  
        HashMap<Integer, registers> temp = new LinkedHashMap<Integer, registers>(); 
        for (Map.Entry<Integer, registers> aa : list) { 
            temp.put(aa.getKey(), aa.getValue()); 
            // System.out.println(aa.getValue().start);
        } 
        // System.out.println("\tdebug");
        return temp; 
    } 

  public static HashMap <Integer, registers> sortByEnd(HashMap <Integer, registers> hm) 
    { 
        // Create a list from elements of HashMap 
        List<Map.Entry<Integer, registers> > list = 
               new LinkedList<Map.Entry<Integer, registers> >(hm.entrySet()); 
  
        // Sort the list 
        Collections.sort(list, new Comparator<Map.Entry<Integer, registers> >() { 
            public int compare(Map.Entry<Integer, registers> o1,  
                               Map.Entry<Integer, registers> o2) 
            { 
                if(o1.getValue().end == o2.getValue().end) return 0;
                if(o1.getValue().end < o2.getValue().end) return -1;
                if(o1.getValue().end > o2.getValue().end) return 1;
                return 0;
                // return (o1.getValue().start).compareTo(o2.getValue().start); 
            } 
        }); 
          
        // put data from sorted list to hashmap  
        HashMap<Integer, registers> temp = new LinkedHashMap<Integer, registers>(); 
        for (Map.Entry<Integer, registers> aa : list) { 
            temp.put(aa.getKey(), aa.getValue()); 
            // System.out.println(aa.getValue().end);
        } 
        // System.out.println("\tdebug");
        return temp; 
    } 

  public void LinearScan (String s){
    Set <String> free = new HashSet <String> ();
    int i;
    String aha = new String();
    for(i=0; i<8; i++){
      aha = "t" + Integer.toString(i);
      free.add(new String(aha));
      aha = "s" + Integer.toString(i);
      free.add(new String(aha));
    }
    aha = "t" + "8";
    free.add(new String(aha));
    aha = "t" + "9";
    free.add(new String(aha));
    
    HashMap <Integer, registers> active = new HashMap <Integer, registers>();
    HashMap <Integer, registers> itr = sortByStart(R.get(s));
    int spillcount = 0;
    
    for (Map.Entry<Integer, registers> en : itr.entrySet()) { 
      // ExpireOldIntervals
      Set <Integer> thro = new HashSet <Integer>();
      for (Map.Entry<Integer, registers> en1 : active.entrySet()){
        if(en1.getValue().end < en.getValue().start){
          thro.add(en1.getKey());
        }
      }
      for(Integer th : thro){
        // System.out.println("Expiring TEMP " + th + " = " + itr.get(th).reg);
        // System.out.println("free size before " + free.size());
        free.add(itr.get(th).reg);
        // System.out.println("free size after " + free.size());
        // System.out.println("active size before " + active.size());
        active.remove(th);
        // System.out.println("active szie after " + active.size());
      }
      active = sortByEnd(active);

      if (active.size() == 18){
        // SpillAtInterval
        int spill = -1;
        for (Map.Entry<Integer, registers> en2 : active.entrySet()){
          spill = en2.getKey();
        }
        if (itr.get(spill).end > en.getValue().end){
          en.getValue().reg = itr.get(spill).reg;
          itr.get(spill).reg = new String(";");
          itr.get(spill).spillval = spillcount;
          active.remove(spill);
          active.put(en.getKey(), en.getValue());
          active = sortByEnd(active);
        }
        else{
          en.getValue().reg = new String(";");
          en.getValue().spillval = spillcount;
        }
        spillcount++;
      }
      else{
        String newreg = new String();
        for(String tmp : free){
          newreg = tmp;
          break;
        }
        // System.out.println(free);
        free.remove(newreg);
        // System.out.println(free); 
        // R.get(s).get(en.getKey()).reg = newreg;
        en.getValue().reg = newreg;
        en.getValue().spillval = -1;
        active.put(en.getKey(), en.getValue());
        active = sortByEnd(active);
        // System.out.println("TEMP " + en.getKey() + " = " + newreg);
      }
    } 
    R.put(s, itr);
    Spills.put(s, spillcount);
    // System.out.println("\tdebug");
  }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;

      int x, y = T.LE.maxcounts.get(n.f0.f0.tokenImage), z;
      // if(y > 4) z = y - 4;
      // else z = 0;
      z = Math.max(0, Integer.valueOf(n.f2.f0.tokenImage) - 4);
      if(T.LE.numcalls.get(n.f0.f0.tokenImage) == 0) x = 8 + Spills.get(n.f0.f0.tokenImage) + z;
      else x = 18 + Spills.get(n.f0.f0.tokenImage) + z; 

      int i = 0;

      n.f0.accept(this, argu);

      System.out.println(" [" + n.f2.f0.tokenImage + "] [" + Integer.toString(x) + "] [" + Integer.toString(y) + "]");
      offset = x - Spills.get(n.f0.f0.tokenImage);
      argoffset = z;

      for(i = 0; i < 8; i++){
        System.out.println("\tASTORE SPILLEDARG " + Integer.toString(argoffset + i) + " s" + Integer.toString(i));
      }

      int tmp, spil;
      String r;
      String s = new String(n.f0.f0.tokenImage);
      int p = Integer.valueOf(n.f2.f0.tokenImage);
      for (i=0; i<p; i++) {
        if(i < 4){
          tmp = i;
          r = new String(R.get(s).get(tmp).reg);
          spil = R.get(s).get(tmp).spillval;
          if(r.equals(";")){
            System.out.print("\tMOVE v1 a" + Integer.toString(i) + "\n");
            System.out.print("\tASTORE SPILLEDARG " + Integer.toString(spil + offset) + " v1\n");
          }
          else{
            System.out.print("\tMOVE " + r + " a" + Integer.toString(i) + "\n");
          }
        }
        else{
          tmp = i;
          r = new String(R.get(s).get(tmp).reg);
          spil = R.get(s).get(tmp).spillval;
          if(r.equals(";")){
            System.out.print("\tALOAD v1 SPILLEDARG " + Integer.toString(i - 4) + "\n");
            System.out.print("\tASTORE SPILLEDARG " + Integer.toString(spil + offset) + " v1\n");
          }
          else{
            System.out.print("\tALOAD " + r + " SPILLEDARG " + Integer.toString(i - 4) + "\n");
          }
        }
      }

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A) n.f0.f0.tokenImage);

      for(i = 0; i < 8; i++){
        System.out.println("\tALOAD " + "s" + Integer.toString(i) + " SPILLEDARG " + Integer.toString(argoffset + i));
      }
      System.out.println("END");
      if(Spills.get(n.f0.f0.tokenImage) > 0) System.out.println("// SPILLED");
      else System.out.println("// NOTSPILLED");

      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      count++;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\tNOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\tERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      String r = new String();
      String l = new String();

      printlabel = 0;
      n.f0.accept(this, argu);
      r = (String) n.f1.accept(this, argu);
      l = (String) n.f2.accept(this, argu);
      printlabel = 1;

      System.out.println("\tCJUMP " + r + " " + l);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      String l = new String();

      printlabel = 0;
      n.f0.accept(this, argu);
      l = (String) n.f1.accept(this, argu);
      printlabel = 1;

      System.out.println("\tJUMP " + l);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      String r1 = new String();
      String r2 = new String();
      String l = new String();
      
      n.f0.accept(this, argu);
      second = 1;
      r1 = (String) n.f1.accept(this, argu);
      second = 0;
      l = (String) n.f2.accept(this, argu);
      r2 = (String) n.f3.accept(this, argu);

      System.out.println("\tHSTORE " + r1 + " " + l + " " + r2);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      String s = new String((String) argu);
      int tmp = Integer.valueOf(n.f1.f1.f0.tokenImage);
      int spil = R.get(s).get(tmp).spillval;
      String r1 = new String();
      String r2 = new String();
      String l = new String();

      n.f0.accept(this, argu);
      use = 0;
      second = 1;
      r1 = (String) n.f1.accept(this, argu);
      use = 1;
      second = 0;
      r2 = (String) n.f2.accept(this, argu);
      l = (String) n.f3.accept(this, argu);

      if(r1.equals("v0")){
        System.out.println("\tHLOAD " + r1 + " " + r2 + " " + l);
        System.out.println("\tASTORE SPILLEDARG " + Integer.toString(spil + offset) + " v0");
      }
      else{
        System.out.println("\tHLOAD " + r1 + " " + r2 + " " + l);
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      String s = new String((String) argu);
      int tmp = Integer.valueOf(n.f1.f1.f0.tokenImage);
      int spil = R.get(s).get(tmp).spillval;
      String r = new String();
      String l = new String();

      printlabel = 0;
      n.f0.accept(this, argu);
      use = 0;
      r = (String) n.f1.accept(this, argu);
      use = 1;
      l = (String) n.f2.accept(this, argu);
      printlabel = 1;

      if(r.equals("v1")){
        System.out.println("\tMOVE " + r + " " + l);
        System.out.println("\tASTORE SPILLEDARG " + Integer.toString(spil + offset) + " v1");
      }
      else{
        System.out.println("\tMOVE " + r + " " + l);
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      String l = new String();

      printlabel = 0;
      n.f0.accept(this, argu);
      l = (String) n.f1.accept(this, argu);
      printlabel = 1;

      System.out.println("\tPRINT " + l);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      count++;
      String l = new String();
      
      printlabel = 0;
      n.f2.accept(this, argu);
      l = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      printlabel = 1;

      System.out.println("\tMOVE v0 " + l);
      
      count = 0;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      String s = new String((String) argu);
      String l = new String();
      String r = new String();

      int i, cnt = 0;
      for(i = 0; i < 10; i++){
        if(!s.equals("_MAIN")) System.out.println("\tASTORE SPILLEDARG " + Integer.toString(argoffset+8+i) + " t" + Integer.toString(i));
        else System.out.println("\tASTORE SPILLEDARG " + Integer.toString(i) + " t" + Integer.toString(i));
      }

      printlabel = 0;
      n.f0.accept(this, argu);
      l = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      // n.f3.accept(this, argu);
      for ( Enumeration<Node> ee = n.f3.elements(); ee.hasMoreElements(); ) {
        r = (String) ee.nextElement().accept(this,argu);
        if(cnt < 4){
          System.out.print("\tMOVE a" + Integer.toString(cnt) + " " + r + "\n");
        }
        else{
          // System.out.print("\tASTORE SPILLEDARG " + Integer.toString(argoffset + cnt - 4) + " " + r + "\n");
          System.out.println("\tPASSARG " + Integer.toString(cnt - 3) + " " + r + "\n");
        }
        cnt++;
      }

      System.out.println("\tCALL " + l);
      
      n.f4.accept(this, argu);
      printlabel = 1;

      for(i = 0; i < 10; i++){
        if(!s.equals("_MAIN")) System.out.println("\tALOAD " + "t" + Integer.toString(i) + " SPILLEDARG " + Integer.toString(argoffset+8+i));
        else System.out.println("\tALOAD " + "t" + Integer.toString(i) + " SPILLEDARG " + Integer.toString(i));
      }

      _ret = (R) new String("v0");
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      String l = new String();

      printlabel = 0;
      n.f0.accept(this, argu);
      l = (String) n.f1.accept(this, argu);
      printlabel = 1;

      _ret = (R) new String("HALLOCATE " + l);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = new String();
      String r = new String();
      String l = new String();

      printlabel = 0;
      op = (String) n.f0.accept(this, argu);
      r = (String) n.f1.accept(this, argu);
      l = (String) n.f2.accept(this, argu);
      printlabel = 1;

      _ret = (R) new String(op + " " + r + " " + l);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int i = n.f0.which;
      if(i == 0) _ret = (R) new String("LE");
      else if(i == 1) _ret = (R) new String("NE");
      else if(i == 2) _ret = (R) new String("PLUS");
      else if(i == 3) _ret = (R) new String("MINUS");
      else if(i == 4) _ret = (R) new String("TIMES");
      else if(i == 5) _ret = (R) new String("DIV");
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      String s = new String((String) argu);
      int tmp = Integer.valueOf(n.f1.f0.tokenImage);
      String r = new String(R.get(s).get(tmp).reg);
      int spil = R.get(s).get(tmp).spillval;
      if(use == 1 && second == 0){
        if(r.equals(";")){
          System.out.println("\tALOAD v1 SPILLEDARG " + Integer.toString(spil + offset));
          _ret = (R) new String("v1");
        }
        else{
          _ret = (R) r;
        }
      }
      else if(use == 1 && second == 1){
        if(r.equals(";")){
          System.out.println("\tALOAD v0 SPILLEDARG " + Integer.toString(spil + offset));
          _ret = (R) new String("v0");
        }
        else{
          _ret = (R) r;
        }
      }
      else if(use == 0 && second == 0){
        if(r.equals(";")){
          _ret = (R) new String("v1");
        }
        else{
          _ret = (R) r;
        }
      }
      else if(use == 0 && second == 1){
        if(r.equals(";")){
          _ret = (R) new String("v0");
        }
        else{
          _ret = (R) r;
        }
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      String s = new String((String) argu);

      if(printlabel == 1){
        System.out.print(n.f0.tokenImage);
      }

      n.f0.accept(this, argu);
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

}