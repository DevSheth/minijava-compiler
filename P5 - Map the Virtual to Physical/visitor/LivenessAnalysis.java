//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class LivenessAnalysis<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   public static labends LE = new labends();
   public static Hashtable <String, livesets> livetable = new Hashtable <String, livesets>();
   public static int count = 0;
   public static int max = 0;
   public static int numcalls = 0;

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      
      LE = (labends) argu;
      LE.numcalls = new Hashtable <String, Integer>();
      LE.maxcounts = new Hashtable <String, Integer>();

      livesets LS = new livesets();
      LS.in = new ArrayList <Set <Integer>>(); 
      LS.out = new ArrayList <Set <Integer>>(); 
      LS.use = new ArrayList <Set <Integer>>(); 
      LS.def = new ArrayList <Set <Integer>>(); 
      LS.succ = new ArrayList <Set <Integer>>();
      livetable.put("_MAIN", LS);

      Set <Integer> in = new HashSet <Integer>();
      Set <Integer> out = new HashSet <Integer>();
      Set <Integer> use = new HashSet <Integer>();
      Set <Integer> def = new HashSet <Integer>();
      Set <Integer> succ = new HashSet <Integer>();
      succ.add(count+1);
      // int i;
      // for(i=0; i<Integer.valueOf(n.f2.f0.tokenImage); i++){
      // 	def.add(i);
      // }
      livetable.get("_MAIN").in.add(in);
      livetable.get("_MAIN").out.add(out);
      livetable.get("_MAIN").use.add(use);
      livetable.get("_MAIN").def.add(def);
      livetable.get("_MAIN").succ.add(succ);

      n.f0.accept(this, argu);
      n.f1.accept(this, (A) "_MAIN");
      n.f2.accept(this, argu);
      count = 0;
      LE.numcalls.put("_MAIN", numcalls);
      numcalls = 0;
      LE.maxcounts.put("_MAIN", max);
      max = 0;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      Enumeration e = livetable.keys();
      while(e.hasMoreElements()){
      	String s = new String((String) e.nextElement());
      	Analyise(livetable.get(s));
      }

      table T = new table();
      T.LE = LE;
      T.LT = livetable;

      _ret = (R) T;
      return _ret;
   }

   public void Analyise(livesets ls){
   	int N = ls.in.size();
   	int i;
   	boolean b = true;
   	while(b){
   		ArrayList <Set <Integer>> oldin = new ArrayList <Set <Integer>>(ls.in);
   		ArrayList <Set <Integer>> oldout = new ArrayList <Set <Integer>>(ls.out);
   		for(i = N-1; i>=0; i--){
   			Set <Integer> diff = new HashSet <Integer>(ls.out.get(i));
   			diff.removeAll(ls.def.get(i));
   			Set <Integer> union = new HashSet <Integer>(diff);
   			union.addAll(ls.use.get(i));
   			ls.in.set(i, union);
   			
   			Set <Integer> sunion = new HashSet <Integer>();
   			for(Integer s : ls.succ.get(i)){
   				sunion.addAll(ls.in.get(s-1));
   			}
   			ls.out.set(i, sunion);
   		}
   		if(oldin.equals(ls.in) && oldout.equals(ls.out)) b = false;
   	}
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      
      livesets LS = new livesets();
      LS.in = new ArrayList <Set <Integer>>(); 
      LS.out = new ArrayList <Set <Integer>>(); 
      LS.use = new ArrayList <Set <Integer>>(); 
      LS.def = new ArrayList <Set <Integer>>(); 
      LS.succ = new ArrayList <Set <Integer>>();
      livetable.put(n.f0.f0.tokenImage, LS);
      
      Set <Integer> in = new HashSet <Integer>();
      Set <Integer> out = new HashSet <Integer>();
      Set <Integer> use = new HashSet <Integer>();
      Set <Integer> def = new HashSet <Integer>();
      Set <Integer> succ = new HashSet <Integer>();
      succ.add(count+1);
      int i;
      for(i=0; i<Integer.valueOf(n.f2.f0.tokenImage); i++){
      	def.add(i);
      }
      livetable.get(n.f0.f0.tokenImage).in.add(in);
      livetable.get(n.f0.f0.tokenImage).out.add(out);
      livetable.get(n.f0.f0.tokenImage).use.add(use);
      livetable.get(n.f0.f0.tokenImage).def.add(def);
      livetable.get(n.f0.f0.tokenImage).succ.add(succ);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A) n.f0.f0.tokenImage);

      LE.numcalls.put(n.f0.f0.tokenImage, numcalls);
      numcalls = 0;
      LE.maxcounts.put(n.f0.f0.tokenImage, max);
      max = 0;

      // int j, i = Integer.valueOf(n.f2.f0.tokenImage);
      // for(j = 0; j < i; j++){
      // 	Set <Integer> union = new HashSet <Integer> (livetable.get(n.f0.f0.tokenImage).def.get(0));
      // 	union.addAll(Arrays.asList(new Integer[] {j}));
      // 	livetable.get(n.f0.f0.tokenImage).def.set(0, union);
      // }
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      count++;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      
      Set <Integer> in = new HashSet <Integer>();
      Set <Integer> out = new HashSet <Integer>();
      Set <Integer> use = new HashSet <Integer>();
      Set <Integer> def = new HashSet <Integer>();
      Set <Integer> succ = new HashSet <Integer>();
      
      String s = new String((String) argu);
      if(LE.Ends.get(s) != count + 1) succ.add(count + 1);

      livetable.get(s).in.add(in);
      livetable.get(s).out.add(out);
      livetable.get(s).use.add(use);
      livetable.get(s).def.add(def);
      livetable.get(s).succ.add(succ);

      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;

      Set <Integer> in = new HashSet <Integer>();
      Set <Integer> out = new HashSet <Integer>();
      Set <Integer> use = new HashSet <Integer>();
      Set <Integer> def = new HashSet <Integer>();
      Set <Integer> succ = new HashSet <Integer>();
      
      String s = new String((String) argu);
      if(LE.Ends.get(s) != count + 1) succ.add(count + 1);

      livetable.get(s).in.add(in);
      livetable.get(s).out.add(out);
      livetable.get(s).use.add(use);
      livetable.get(s).def.add(def);
      livetable.get(s).succ.add(succ);

      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;

      Set <Integer> in = new HashSet <Integer>();
      Set <Integer> out = new HashSet <Integer>();
      Set <Integer> use = new HashSet <Integer>();
      Set <Integer> def = new HashSet <Integer>();
      Set <Integer> succ = new HashSet <Integer>();
      
      String s = new String((String) argu);
      if(LE.Ends.get(s) != count + 1) succ.add(count + 1);
      use.add(Integer.valueOf(n.f1.f1.f0.tokenImage));
      succ.add(LE.Labels.get(n.f2.f0.tokenImage));

      livetable.get(s).in.add(in);
      livetable.get(s).out.add(out);
      livetable.get(s).use.add(use);
      livetable.get(s).def.add(def);
      livetable.get(s).succ.add(succ);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;

      Set <Integer> in = new HashSet <Integer>();
      Set <Integer> out = new HashSet <Integer>();
      Set <Integer> use = new HashSet <Integer>();
      Set <Integer> def = new HashSet <Integer>();
      Set <Integer> succ = new HashSet <Integer>();
      
      String s = new String((String) argu);
      succ.add(LE.Labels.get(n.f1.f0.tokenImage));

      livetable.get(s).in.add(in);
      livetable.get(s).out.add(out);
      livetable.get(s).use.add(use);
      livetable.get(s).def.add(def);
      livetable.get(s).succ.add(succ);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;

      Set <Integer> in = new HashSet <Integer>();
      Set <Integer> out = new HashSet <Integer>();
      Set <Integer> use = new HashSet <Integer>();
      Set <Integer> def = new HashSet <Integer>();
      Set <Integer> succ = new HashSet <Integer>();
      
      String s = new String((String) argu);
      if(LE.Ends.get(s) != count + 1) succ.add(count + 1);
      use.add(Integer.valueOf(n.f1.f1.f0.tokenImage));
      use.add(Integer.valueOf(n.f3.f1.f0.tokenImage));

      livetable.get(s).in.add(in);
      livetable.get(s).out.add(out);
      livetable.get(s).use.add(use);
      livetable.get(s).def.add(def);
      livetable.get(s).succ.add(succ);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;

      Set <Integer> in = new HashSet <Integer>();
      Set <Integer> out = new HashSet <Integer>();
      Set <Integer> use = new HashSet <Integer>();
      Set <Integer> def = new HashSet <Integer>();
      Set <Integer> succ = new HashSet <Integer>();
      
      String s = new String((String) argu);
      if(LE.Ends.get(s) != count + 1) succ.add(count + 1);
      use.add(Integer.valueOf(n.f2.f1.f0.tokenImage));
      def.add(Integer.valueOf(n.f1.f1.f0.tokenImage));

      livetable.get(s).in.add(in);
      livetable.get(s).out.add(out);
      livetable.get(s).use.add(use);
      livetable.get(s).def.add(def);
      livetable.get(s).succ.add(succ);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;

      Set <Integer> in = new HashSet <Integer>();
      Set <Integer> out = new HashSet <Integer>();
      Set <Integer> use = new HashSet <Integer>();
      Set <Integer> def = new HashSet <Integer>();
      Set <Integer> succ = new HashSet <Integer>();
      
      String s = new String((String) argu);
      String t = new String();
      if(LE.Ends.get(s) != count + 1) succ.add(count + 1);
      def.add(Integer.valueOf(n.f1.f1.f0.tokenImage));

      livetable.get(s).in.add(in);
      livetable.get(s).out.add(out);
      livetable.get(s).use.add(use);
      livetable.get(s).def.add(def);
      livetable.get(s).succ.add(succ);
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t = (String) n.f2.accept(this, argu);
      
      if(!t.equals(";")) livetable.get(s).use.get(count).add(Integer.valueOf(t));
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;

      Set <Integer> in = new HashSet <Integer>();
      Set <Integer> out = new HashSet <Integer>();
      Set <Integer> use = new HashSet <Integer>();
      Set <Integer> def = new HashSet <Integer>();
      Set <Integer> succ = new HashSet <Integer>();
      
      String s = new String((String) argu);
      String t = new String();
      if(LE.Ends.get(s) != count + 1) succ.add(count + 1);

      livetable.get(s).in.add(in);
      livetable.get(s).out.add(out);
      livetable.get(s).use.add(use);
      livetable.get(s).def.add(def);
      livetable.get(s).succ.add(succ);

      n.f0.accept(this, argu);
      t = (String) n.f1.accept(this, argu);

      if(!t.equals(";")) livetable.get(s).use.get(count).add(Integer.valueOf(t));
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      count++;

      Set <Integer> in = new HashSet <Integer>();
      Set <Integer> out = new HashSet <Integer>();
      Set <Integer> use = new HashSet <Integer>();
      Set <Integer> def = new HashSet <Integer>();
      Set <Integer> succ = new HashSet <Integer>();
      
      String s = new String((String) argu);
      String t = new String();
      if(LE.Ends.get(s) != count + 1) succ.add(count + 1);

      livetable.get(s).in.add(in);
      livetable.get(s).out.add(out);
      livetable.get(s).use.add(use);
      livetable.get(s).def.add(def);
      livetable.get(s).succ.add(succ);

      n.f2.accept(this, argu);
      t = (String) n.f3.accept(this, argu);

      if(!t.equals(";")) livetable.get(s).use.get(count).add(Integer.valueOf(t));

      n.f4.accept(this, argu);
      count = 0;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;

      String s = new String((String) argu);
      String t = new String();
      String tt = new String();

      n.f0.accept(this, argu);
      t = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      for ( Enumeration<Node> ee = n.f3.elements(); ee.hasMoreElements(); ) {
        tt = (String) ee.nextElement().accept(this,argu);
        livetable.get(s).use.get(count).add(Integer.valueOf(tt));
      }
      // n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if(!t.equals(";")) livetable.get(s).use.get(count).add(Integer.valueOf(t));

      numcalls++;
      int p = n.f3.size();
      if(p > max) max = p;

      _ret = (R) new String(";");
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;

      String s = new String((String) argu);
      String t = new String();
      
      n.f0.accept(this, argu);
      t = (String) n.f1.accept(this, argu);

      if(!t.equals(";")) livetable.get(s).use.get(count).add(Integer.valueOf(t));

      _ret = (R) new String(";");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;

      String s = new String((String) argu);
      String t = new String();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t = (String) n.f2.accept(this, argu);

      livetable.get(s).use.get(count).add(Integer.valueOf(n.f1.f1.f0.tokenImage));
      if(!t.equals(";")) livetable.get(s).use.get(count).add(Integer.valueOf(t));

      _ret = (R) new String(";");
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret = (R) n.f1.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) new String(";");
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) new String(";");
      return _ret;
   }

}